==========================================================================================================================================================================
                                                                            WARP DIVERGENCE
==========================================================================================================================================================================

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                              The Problem
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

PC - Program countner (id of instruction)
Warp - fixed by hardware set of 32 consectuive threads. Each thread has the same PC in warp in given cycle.
Mask - 32 length bit number, set bit on n-th position indicates that n-th thread is active. Unset bit indicates that the given thread is idle

Let us consider the following example:

                  PC: A
                  if(cond) {
                    PC: B
                  } else {
                    PC: C
                  }
                  PC: D

On the warp level it looks as follows:

PC: A            PC: B                 PC: C                PC: D
Cycle X          Cycle X+1             Cycle X+2            Cycle X+3
------->         --------->            IDLE                 ---------->
------->         --------->            IDLE                 ---------->
........         ..........            .........            ...........
------->          IDLE                 --------->           ---------->
------->          IDLE                 --------->           ---------->
                                                            Re-divergence


Divergence lead to loss performance. Actual GPU hardware cannot ommit divergence (if condition is evaluated in runtime, so it is hard to predict how many threads
will run one branch and how many second branch). Desplite of this we can optimizing branch divergence by grouping maximum threads from one branch into one SIMD and from 
second branch into other SIMD. This gives us great achivement in particular in the case where we have multiple divergence with branches contains several instructions.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                      Optimizing divergence
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                     Dynamic Warp Formation
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Let us consider the following example
(assume that warp is 4 threads, each PC instruction is executed by two warps, i.e x and y)

      PC: A                            PC: A      PC: A     PC: B     PC: B     PC: C     PC: C      PC: D     PC: D    PC: E     PC: E     PC: F      PC: F
        x/1111                         warp x     warp y    warp x    warp y    warp x    warp y     warp x    warp y   warp x    warp y    warp x     warp y
        y/1111                         ----->     ----->    ----->    idle      ------>   idle       idle      idle     ----->    idle      idle       ----->
      if(cond1) {                      ----->     ----->    ----->    idle      idle      idle       ------>   idle     ----->    idle      idle       ----->
        PC: B                          ----->     ----->    ----->    ----->    idle      ------>    ------>   idle     ----->    ----->    idle       idle
          x/1110                       ----->     ----->    idle      ----->    idle      idle       idle      ----->   idle      ----->    ----->     idle
          y/0011
        if(cond2) {
          PC: C                        PC: G       PC: G     PC: A
            x/1000                     warp x      warp y
            y/0010                     ----->      ----->
        } else {                       ----->      ----->
          PC: D                        ----->      ----->
            x/0110                     ----->      ----->
            y/0001
        }                              We can seen much divergence and highly underutilzed warps. We can improve this. Let us focus on PC: D
        PC: E                          
          x/1110                      Baseline:                                     Dynamic Warp Formation
          y/0011                                                                      
      } else {                        PC: D       PC: D                              PC: D
        PC: F                         warp x      warp y                             warp x && warp y
          x/0001                      idle        idle                               idle
          y/1100                      ----->      idle            ======>            ------->
      PC: G                           ----->      idle                               ------->
        x/1111                        idle        ----->                             ------->
        y/1111
        goto A

We can se that in Dynamic Warp Formation (DWF) we merged two warps into one. This is great perf improving but also arise a problem.
Let us consider anonter PC block, namely PC: B

                                                            DWF
PC: B        PC: B                            PC: B                    PC: B
warp x       warp y                           warp x && warp y        warp y
------>      idle                             ------->                idle
------>      idle         ==========>         ------->                idle
------>      ----->                           ------->                ------->
idle         ----->                           ------->                idle

Note that warp x and warp y contain 3rd acrive thread, so if we wont to merge this two warps then it will occures 2 bank conflict on register file. Therefore
in DWF we also obtain two PC: B blocks in which second one is strongly unutilized!

How to solve it from the hardware perspective?
The first problem is regular optimal access to register files after merging warps

Eeach thread has own space in register file, like this
Alu ----> thread1 register
Alu ----> thread2 register
Alu ----> thread3 register
........................

Ideally situation is where we have fully coalescing access to warp
  
                                           reg1    reg2   reg3  ....  reg 32       
cahe line segment from L2 (128 kb) --->    ---     ---    ---          ---     id reg segment

Because we merge two or more warps into one then we have rather the following situation

reg1    reg2    reg3    ...    reg32
---                             ----
                ----
        ----                
So that if we merge two warps then the most optimal case is when we preserve order of threads in this two warps. Otherwise we have to use crossbar in registers.
Let us show hardware implementtion of warp scheduler.


|------------------|      |-------------|      |------------|   |----|
|warp update reg A |----->|             |----->|            |-->|    |  
|------------------|      | PC warp LUT |      | warp pool  |-->|    |
                          |             |      |            |-->|    | issue logic
|------------------|      |             |      |            |-->|    |
|warp update reg B |----->|             |----->|            |-->|    |
|------------------|      |-------------|      |------------|   |----|
                                   |                 |               |
                                   |               warp              |   
                                   |------------- allocator----------|
                                                                     |
                                                                   |---|  
                                                                   |   |
                                            ALU's<----registers  <-|   | I-Cache
                                                                   |---|

Let us consider two warps with mask 1111 running PC A, namely x/1111 and y/1111. Each of them is in warp pool and then executed on ALU's concruently. When warp x finish his work then its
threads are reused and divided into to groups. The fist one is with the mask 0110 and putted into warp update reg A with PC B, the second one (1001) is putted into warp update reg B with 
PC C. Next these groups are proceded into PC warp LUT - the fist one with index 0 and te second one with index 1. Finally are putted into warp pool and waiting for warp y. Similary, 
reused threads from y are divided into two groups - mask 1011 for PC B and mask 0100 for PC C. On PC warp LUT we note that the 3rd thread from warp y has register bank conflict with 3rd thread 
from warp x hence we divide group 1011 into 1001 and 0010. The firs one is merged with 0110 from warp x in warp loop and the second one is considered as next warp with index 3.
Finally in warp pool we have three rady warps - merged 1111 with PC B, mreged 111 with PC C and 0010 with PC B.

The key benefits of this approach is that we have much better SIMD-warp utilization. Moreover there is no register bank conflict and we need no crossbar on registers.
Main dissadvantage is that there is possibility occurs strongy unutilized SIMD-warp. Moreover, one warp need to wait several cycles to merged with other one.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                             Large Warp
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

In this approach we join several warps into big one. As we noticed each warp has own mask of active threads. Because we want to join several warps into one so our mask of this big warp
will be 2D table.

Let be given N several warps (w_1, ..., w_N). Each of them has a mask (T_0, ...., T_31). Then large warp mask will be of the form

|----------------------------|
|T_0|T_1|..........|T_30|T_31|  w_1
|T_32|.............|T_62|T_63|  w_2
|............................|
|T_((N-1)*32|...|T_((N*32)-1)|  w_N
|----------------------------|

Each cell indicates acvive or ile thread (1 or 0)

Each warp has is own ID register file (i.e each lane in given varp has te same ID in different register bank) like this

           Warp 1's register file
|-------|-------|-------|--------|-------|       
| ID    |       |       |        |       |       |-------|
|-------|-------|-------|--------|-------|       |       |
|xxxxxxx|xxxxxxx|xxxxxxx|xxxxxxxx|xxxxxxx|<------|       |<------- warp 1's with reg ID A 
|-------|-------|-------|--------|-------|       |       |
|  ID   |       |       |        |       |       |       |
|-------|-------|-------|--------|-------|       | adress|
lane 0   lane 1   .....  lane N-2 lane N-1       |decoder|
                                                 |       |
                                                 |       |
          Warp 2's register file                 |       |
|----------------------------------------|       |       |
|                                        |<----- |       |<------- warp 2's with reg ID B
|                                        |       |       |
|                                        |       |       |
|----------------------------------------|       |       |
                                                 |       |
.......................................          |-------|

Because


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          Warp Interleaving
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          Thread Frontiers
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                         Variable Warp Sizing
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                            Virtual Warp
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Virtual warping is pure logic/software technique. It is wery usefull when we have a long nested sequence if-else-if flows, for example in irregular structure like trees or graphs.
Regular structure like matrix or memory layout format have regular access to single element. Alhrought, we cannot know size of matrix on compiler time but we design pattern of strides to access 
single element. Hence we can designt code with avoiding branch divergences and uncoalesced memory access. 
Irregular structure is absolutely not know at the compiler time. We can add much nodes with different in and out degrees in runtime. To get access to a single node we have to go throught 
sequence of if-else-if which lead us to large divergence and uncoalesced memory access. 
One of the most common technique to improve this is virtual warping. In this case we divide our task into two parts:
- SISD (single instruction single data) In this part we dedicated an unique instruction to an unique element form set of data.
- SIMD (single instruction multiple data) Here, we propagate the same instruction to set of similar data.

Notice that size of warp is fixed by hardware restriction. In the case of NVidia/Cuda it is 32 threads. So that we virtualy divide the warp into several subwarps. Each subwarps will represent
a SISD but each lane of this subwarp is putted in SIMD

                          warp
virt warp  virt warp
|--------|--------|--------|--------|--------|--------|
| SSID   | SSID   | SSID   | SSID   | SSID   | SSID   |
|        |        |        |        |        |        |
|--------|--------|--------|--------|--------|--------|
     |
     |
|--|--|--|
|  |  |  | SIMD
|--|--|--|

Note that we still have divergence on SISD nodes. Each virtual warp will be serialized but due this the divergence will be reduce and coalesced memory access will be improve.

On of the best example to demonstrate how this conception works is BFS (Breath first search) algorithm. As the name suggested us, BFS in each iteration goes throught all horizontal nodes
Each of this horizont is called level. We start from the head which is on 0-th level. 
