==========================================================================================================================================================================
                                                                            WARP DIVERGENCE
==========================================================================================================================================================================

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                              The Problem
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

PC - Program countner (id of instruction)
Warp - fixed by hardware set of 32 consectuive threads. Each thread has the same PC in warp in given cycle.
Mask - 32 length bit number, set bit on n-th position indicates that n-th thread is active. Unset bit indicates that the given thread is idle

Let us consider the following example:

                  PC: A
                  if(cond) {
                    PC: B
                  } else {
                    PC: C
                  }
                  PC: D

On the warp level it looks as follows:

PC: A            PC: B                 PC: C                PC: D
Cycle X          Cycle X+1             Cycle X+2            Cycle X+3
------->         --------->            IDLE                 ---------->
------->         --------->            IDLE                 ---------->
........         ..........            .........            ...........
------->          IDLE                 --------->           ---------->
------->          IDLE                 --------->           ---------->
                                                            Re-divergence


Divergence lead to loss performance. Actual GPU hardware cannot ommit divergence (if condition is evaluated in runtime, so it is hard to predict how many threads
will run one branch and how many second branch). Desplite of this we can optimizing branch divergence by grouping maximum threads from one branch into one SIMD and from 
second branch into other SIMD. This gives us great achivement in particular in the case where we have multiple divergence with branches contains several instructions.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                      Optimizing divergence
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
I                                                                    Dynamic Warp Formation
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
